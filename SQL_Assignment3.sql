--1 use JOIN because subquery could be correlated and not very effective.
--2 CTE is common table expression. It can be used in temporary views and recursive queries.
--3 TABLE VARIABLE is a data type that can be used within a Transact-SQL batch, stored procedure, or function. Use it when the data set is not very large.
--4 Truncate reseeds identity values, while Delete does not. Truncate remove all records and does not fire triggers. Truncate is faster.
--5 identity column is made up of values generated by database. Truncate reseeds identity values while delete does not.
--6 it is the syntax of how to use delete and truncate.

--1
select distinct City from Employees
where City in (select City from Customers)
--2
--a
select distinct City from Customers
where City not in (select City from Employees)
--b
select City from Customers
except 
select City from Employees
--3
select o.ProductID, count(*) as Total
from [Order Details] o inner join Products p on o.ProductID = p.ProductID
group by o.ProductID
--4
select c.City, count(*) as Total
from Customers c left outer join [Orders] o on c.City= o.ShipCity
group by c.City
--5 
--a
--b
select distinct City
from Customers
where City in (select City from Customers group by City having count(*) >=2)
--6
select ShipCity
from Orders o inner join [Order Details] d on o.OrderID=d.OrderID inner join Customers c on o.ShipCity=c.City
group by ShipCity
having count(distinct d.ProductID) >=2
--7
select c.CustomerID
from Customers c inner join Orders o on c.CustomerID=o.CustomerID
where c.City <> o.ShipCity
--8
select temp.ProductID, temp.AveragePrice, count(c.City) from (
select top 5 ProductID, sum(UnitPrice*Quantity)/sum(Quantity) as AveragePrice
from [Order Details] d inner join Orders o on d.OrderID = o.OrderID inner join Customers c on o.CustomerID=c.CustomerID
group by ProductID
order by count(*) desc) temp inner join [Order Details] d on temp.ProductID=d.ProductID inner join Orders o on o.OrderID=d.OrderID inner join Customers c on c.CustomerID=o.CustomerID
group by temp.ProductID, temp.AveragePrice, c.City
--9
--a
select City
from Employees
where City not in (select ShipCity from Orders)
--b
select City
from Employees
except
select ShipCity from [Orders]
--10

--11

/*we can use CTE.
WITH CTE AS(
   SELECT [col1], [col2], [col3], [col4], [col5], [col6], [col7],
       RN = ROW_NUMBER()OVER(PARTITION BY col1 ORDER BY col1)
   FROM dbo.Table1
)
DELETE FROM CTE WHERE RN > 1
*/
--12
select empid from Employee
except
Select mgrid from Employee group by mgrid
--13
select depid 
from Employee
group by depid 
having count(*) = (select top 1 count(*) from employee group by depid order by count(*) desc)
--14
